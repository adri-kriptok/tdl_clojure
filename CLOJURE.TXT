

Clojure
Clojure
Ir a la navegaci�nIr a la b�squeda
Clojure
Clojure logo.svg
Desarrollador(es)
Richard Hickey
https://clojure.org/
Informaci�n general
Extensiones comunes	clj, cljs, cljc, edn y cljr
Paradigma	Funcional, Lenguaje de programaci�n multiparadigma
Apareci� en	2007
Dise�ado por	Rich Hickey
�ltima versi�n estable	(2016-01-19)
Sistema de tipos	din�mico, fuerte
Implementaciones	JVM, CLR, JavaScript
Influido por	Lisp, ML, Haskell, Erlang Prolog
Sistema operativo	Multiplataforma
Licencia	Eclipse Public License
[editar datos en Wikidata]
Clojure es un lenguaje de programaci�n de prop�sito general dialecto de Lisp. Hace un �nfasis especial en el paradigma funcional, con el objetivo (entre otros) de eliminar la complejidad asociada a la programaci�n concurrente. Clojure puede ser ejecutado sobre la M�quina Virtual de Java y la m�quina virtual de la plataforma .NET, as� como compilado a JavaScript.


�ndice
1	Principios
2	Sintaxis
3	Macros
4	Caracter�sticas del lenguaje
5	Ejemplos
6	Bibliograf�a
7	Enlaces externos
8	Referencias
Principios
Rich Hickey describe el desarrollo de Clojure como la b�squeda de un lenguaje que no pudo encontrar: un lisp funcional por defecto, integrado sobre un entorno robusto en lugar de ser su propia plataforma, y con la programaci�n concurrente en mente.1?

Asimismo, en principio se rechaza la orientaci�n a objetos, ofreciendo un enfoque en el que los programas se expresan como la aplicaci�n de funciones sobre datos, m�s que como la interacci�n entre entidades mutables que mezclan representaci�n de datos, y comportamiento. Por otra parte, caracter�sticas tales como instanciabilidad, polimorfismo e interfaces son efectivamente parte del lenguaje.

Sintaxis
Como el resto de la familia Lisp, la sintaxis de Clojure est� construida sobre expresiones simb�licas que son convertidas en estructuras de datos por un lector antes de ser compiladas. Las expresiones se caracterizan por estar delimitadas por par�ntesis, y por su notaci�n prefija, por la que se llama al primer miembro de cada lista como funci�n, pas�ndole el resto de miembros como argumentos.

Esta peculiaridad, extra�a para los habituados a los lenguajes m�s populares basados en la sintaxis del lenguaje de programaci�n C es la base de su flexibilidad. Estructuras de datos tales como mapas, conjuntos y vectores tienen una expresi�n literal; no requieren transformaci�n alguna a la hora de incorporarse al �rbol sint�ctico generado por el compilador. Clojure es un Lisp-1 y no est� particularmente dise�ado para ser compatible con otros lisps.

Macros
Un macro es un fragmento de c�digo que acepta como argumentos otras expresiones, sin evaluar, transform�ndolas previamente a su evaluaci�n. Esto permite la aparici�n de "programas que crean programas": incorporaciones al lenguaje -estructuras de control de flujo- o creaci�n de un lenguaje espec�fico del dominio. Posibilidades en principio no alcanzables en otras familias de lenguajes sin recurrir al desarrollo de un compilador.

El sistema de macros de Clojure es muy similar al de Common Lisp con la excepci�n de que la versi�n de Clojure de la comilla inversa (llamada "comilla sint�ctica") cualifica los s�mbolos con el espacio de nombres al que pertenece. As� se ayuda a prevenir la captura no intencionada ya que est�n prohibidos los bindings con nombres cualificados. Es posible forzar la expansi�n de una macro que las capture pero debe hacerse expl�citamente. Clojure proh�be tambi�n re-enlazar nombres globales en otros espacios de nombres que hayan sido importados en el actual.

Otra caracter�stica de la comilla sint�ctica es que permite un sistema de templating, en el que se puede especificar qu� miembros de una lista deben evaluarse mediante los operadores unquote (~) y unquote-splice (~@), dando lugar a macros m�s concisas y manejables.

Caracter�sticas del lenguaje
Desarrollo din�mico con una consola de evaluaci�n (en ingl�s, REPL: read eval print loop).
Representaci�n de funciones como valores, y preferencia por la recursi�n y el uso de higher order functions sobre de la iteraci�n basada en efectos secundarios.
N�meros de precisi�n arbitraria, y representaci�n literal de fracciones, generadas en las divisiones no enteras.
Secuencias con evaluaci�n perezosa (los elementos de la secuencia no se computan hasta que son necesarios, lo que permite representar conjuntos infinitos en potencia).
Sistema integrado de estructuras de datos persistentes e inmutables.
Control del estado (conjunto de valores que puede adquirir una entidad en el tiempo) en situaciones de concurrencia a trav�s de sistemas transaccionales, de agentes y mediante bindings locales.
Interacci�n con java: al compilarse a bytecode de la JVM, las aplicaciones escritas en Clojure pueden ser f�cilmente integradas en servidores de aplicaciones u otros entornos Java con escasa complejidad adicional. Se implementan por defecto todas las interfaces posibles a nivel de clases, estructuras de datos y concurrencia para minimizar los esfuerzos requeridos para conseguir esta portabilidad.
Ejemplos
Hola mundo. N�tese que dada la naturaleza del REPL, no es necesaria una orden de impresi�n.

"�Hola, mundo!"
Un generador de n�meros �nicos y consecutivos que soporta llamadas concurrentes:

(let [i (atom 0)]
  (defn generar-id-unica
    "Devuelve un identificador num�rico distinto para cada llamada."
    []
    (swap! i inc)))
Una subclase an�nima de java.io.Writer que no escribe en ning�n sitio y una macro que lo usa para silenciar todas las expresiones evaluadas con ella.

(def bit-bucket-writer
  (proxy [java.io.Writer] []
    (write [buf] nil)
    (close []    nil)
    (flush []    nil)))

(defmacro noprint
  "Evalua la expresiones dadas con todas las impresiones a *out* silenciadas."  
  [& forms]
  `(binding [*out* bit-bucket-writer]
     ~@forms))

(noprint
 (println "Hello, nobody!"))
En este ejemplo diez hilos manipulan una estructura de datos compartida, que consiste en cien vectores que contienen diez n�meros �nicos al inicio secuenciales. Cada hilo elige dos posiciones aleatorias en dos vectores aleatorios y los intercambia. Todos los cambios en los vectores se hacen dentro de transacciones usando el sistema de memoria transaccional por software de Clojure. Es por eso que incluso despu�s de mil iteraciones no se pierde ning�n n�mero.

(defn run [nvecs nitems nthreads niters]
  (let [vec-refs (vec (map (comp ref vec)
                           (partition nitems (range (* nvecs nitems)))))
        swap #(let [v1 (rand-int nvecs)
                    v2 (rand-int nvecs)
                    i1 (rand-int nitems)
                    i2 (rand-int nitems)]
                (dosync
                 (let [temp (nth @(vec-refs v1) i1)]
                   (alter (vec-refs v1) assoc i1 (nth @(vec-refs v2) i2))
                   (alter (vec-refs v2) assoc i2 temp))))
        report #(do
                 (prn (map deref vec-refs))
                 (println "Distinct:"
                          (count (distinct (apply concat (map deref vec-refs))))))]
    (report)
    (dorun (apply pcalls (repeat nthreads #(dotimes [_ niters] (swap)))))
    (report)))

(run 100 10 10 100000)
Salida del ejemplo anterior:

([0 1 2 3 4 5 6 7 8 9] [10 11 12 13 14 15 16 17 18 19] ...
 [990 991 992 993 994 995 996 997 998 999])
Distinct: 1000
 
([382 318 466 963 619 22 21 273 45 596] [808 639 804 471 394 904 952 75 289 778] ...
 [484 216 622 139 651 592 379 228 242 355])
Distinct: 1000
Bibliograf�a
Halloway, Stuart (28 de mayo de 2009), Programming Clojure (1st edici�n), Pragmatic Bookshelf, pp. 304, ISBN 1934356336.
VanderHart, Luke (31 de diciembre de 2009), Practical Clojure (1st edici�n), Apress, p. 350, ISBN 1430272317, archivado desde el original el 17 de septiembre de 2010, consultado el 10 de febrero de 2010.
Rathore, Amit (December 2009), Clojure in Action (1st edici�n), Manning, p. 475, ISBN 9781935182597.
Fogus, Michael; Houser, Chris (January 2010), The Joy of Clojure (1st edici�n), Manning, p. 300, ISBN 9781935182641.
Enlaces externos
P�gina principal Clojure
Repositorio del c�digo de Clojure en GitHub
Una visi�n general sobre Clojure
Tutoriales en v�deo
clojuredocs.org - Community-powered documentation and examples
clojure-doc.org - Community-driven documentation site for the Clojure programming language
Referencias
 �Principios fundamentales�. Rich Hickey (en ingl�s). Consultado el 17 de octubre de 2008.
Control de autoridades	
Proyectos WikimediaWd Datos: Q51798Commonscat Multimedia: Category:Clojure
IdentificadoresGND: 7722643-4LCCN: sh2011003332Microsoft Academic: 2777596660Inform�ticaArch Linux: clojureAUR: clojure-gitDebian: clojureFedora: clojureFree Software Directory: ClojureGentoo: dev-lang/clojureOpen Hub: clojureUbuntu: clojure
Categor�as: Lenguajes de programaci�n por paradigmaLenguajes funcionalesLispSofware de 2007
Men� de navegaci�n
No has accedido
Discusi�n
Contribuciones
Crear una cuenta
Acceder
Art�culoDiscusi�n
LeerEditarVer historial
Buscar
Buscar en Wikipedia
Portada
Portal de la comunidad
Actualidad
Cambios recientes
P�ginas nuevas
P�gina aleatoria
Ayuda
Donaciones
Notificar un error
Herramientas
Lo que enlaza aqu�
Cambios en enlazadas
Subir archivo
P�ginas especiales
Enlace permanente
Informaci�n de la p�gina
Citar esta p�gina
Elemento de Wikidata
Imprimir/exportar
Crear un libro
Descargar como PDF
Versi�n para imprimir
En otros proyectos
Wikimedia Commons

En otros idiomas
???????
Deutsch
English
Fran�ais
???
???
Portugu�s
???????
??
17 m�s
Editar enlaces
Esta p�gina se edit� por �ltima vez el 20 abr 2021 a las 20:41.
El texto est� disponible bajo la Licencia Creative Commons Atribuci�n Compartir Igual 3.0; pueden aplicarse cl�usulas adicionales. Al usar este sitio, usted acepta nuestros t�rminos de uso y nuestra pol�tica de privacidad.
Wikipedia� es una marca registrada de la Fundaci�n Wikimedia, Inc., una organizaci�n sin �nimo de lucro.
Pol�tica de privacidadAcerca de WikipediaLimitaci�n de responsabilidadVersi�n para m�vilesDesarrolladoresEstad�sticasDeclaraci�n de cookiesWikimedia FoundationPowered by MediaWiki